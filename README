Cult of the Bound Variable
ICFP 2011 Programming Contest


Cult of the Bound Variable, the descendants of the CMU-affiliated team that ran
the 2006 ICFP Programming Contest, is usually a rather large team. This year,
we were not only large but had active participants in five different cities on 
three separate continents (Pittsburgh, New York City, Boston, Paris, and
Bangalore). 

In order to allow many people to participate together and have fun, in many
recent years our overall design has been "arena" based - we allow different
subgroups to explore many different solutions during the contest, but all the
code is pulled into a shared sources.cm file. This greatly facilitates sharing
and means that people can either work on finished submissions or shared 
libraries throughout the contest. We tag everything with revision numbers
with the knowledge that sometimes progress goes backwards, and the code
at the end of the contest is not always the code we want to use to build our
final submission.

We describe several aspects of our submission, from roughly the highest to the
lowest levels: the Kompiler (a compiler), DOS (a scheduler), the individual
candidate players, the Demonic Tutor (a match server), and CARDFAX (a web 
tracking system).


== The Kompiler == 

Because we like writing functional programs, not SKI combinator terms, we wrote
a compiler to cards, the Kompiler, which allowed LTG programs to be written
using a lambda-like combinator library.  The Kompiler translates lambda-terms
to card-combinator terms using a call-by-value variant of Curry's "optimized"
bracket abstraction algorithm which takes into account whether the variable
to be abstracted over occurs in the body of the abstraction or not:

    [x] x = I
    [x] V = K V  (if x not free in V and V value)
    [x] V x = V  (if x not free in V and V value)
    [x] M1 M2 = S ([x] M1) ([x] M2)

This algorithm produces *vastly* smaller terms than the naive approach given
in the contest task description in many common cases by omitting needless
applications of S.  (An interesting bug in an early version of the Kompiler
omitted the value checks, causing effects to happen too early, or worse, to be
discarded entirely -- including the effect of non-termination!)

After producing a combinator term, the Kompiler "linearizes" a term, turning it
into an equivalent term that can be created by only left- and right-applications
to constant cards.  Two of our team members had dramatically different ideas for
linearization, both based on the core idea of eliminating parentheses using S
and K:

        t (u v)
    === (K t v) (u v)
    === S (K t) u v

In the case that either u or v is a card, the last term is "more linear" now
than the given one, and linearization can proceed on the remainder, either v
or u.

Each linearization strategy produced smaller terms in different cases, so in
the end, we decided to just run both and pick the smaller output.  We
recognized early on that producing small terms is paramount, since every left-
or right- application spent building a large term costs an entire turn of play.


== Dominators and the Dominator Operating System ==

The Dominator Operating System is a response to the competing demands of 
needing to do several things (defense, short-term offense, long-term offense)
well. It allows a contestant to be made of several Dominators, the aggressively
named thread abstraction in DOS. The main role of DOS is to handle memory
partitioning and scheduling for the scarce resource of plays.

Individual dominators can use the operating system to reserve slots for their
processes, fork, block for certain events, and manipulate their running 
priority. There is no memory protection, so dominators have to be careful not 
to execute functions that write into the slots of other dominators. At every
turn, DOS runs the "preview" function of every dominator so that the dominators
can look at the state (possibly changing its priority in response) and update
their internal memory. Then, DOS selects a single process and runs a "taketurn"
function that allows a single dominator, as determined by the scheduler, to
either run or declare that it is blocked and has nothing to do.

Underlying DOS are two abstraction levels that we created as we understood 
the problem better. At various points, we wrote contestants against each of
these interfaces. At the bottom is the PLAYER abstraction, which is used by the
code that talks to and from standard output, and knows nothing else. Next is 
the LAYER abstraction, which abstracts away maintnence of the game state. 
(There is an alternate CORO_LAYER on top of PLAYER that allows contestants to 
be coded as coroutines.) 


== Individual Players == 

A player differentiated itself from the global infrastructure based on the
content of a file player-*.sml in the root of the repository. Some of these
were very simple, and relied entirely on capabilities built into the shared
infrastructure.

<Anybody want to write about their players?>

As of 10 hours before the end of the contest, dozens and dozens of players
had been created, 39 had been registered with the CARDFAX arena (see below),
and 22 were currently being tracked in the arena as potential candidates for
submission.


== The Demonic Tutor ==

The Demonic Tutor (named after a Magic: The Gathering card --
http://sales.starcitygames.com/cardsearch.php?singlesearch=Demonic%20Tutor)
was our clone of the judges' interactive LTG clients. It allowed players
to be run against each other at the head of the repository. Based on our 
reading of the rules, it differed from the judges' version in allowing
each player 100000 turns.

./tutor leviathan killer

And it allowed matches to be played relative to particular revisions of the
repository. Below, we would make player-leviathan.sml in version 162 of the
repository, player-killer.sml in version 193 of the repository, and allow
them to complete.

./tutor leviathan:162 killer:193

If these two name:revision combinations are registered with CARDFAX (see
below), then the results of the match will be recorded by a simple RPC
interface (the ML code would 1) invoke wget to 2) visit a webpage that 3) was
a php file that stored things in CARDFAX's database.) In order to facilitate
this kind of play, the tutor essentially had Makefile-like capabaility: it
checked for the existence of player-leviathan-162.exe, and then built it
if it did not exist.

The demonic tutor also had a mode where it would query the database for some 
under-tested pair of players and automatically run a test ("autotutor").


== CARDFAX ==

CARDFAX is the 2011 arena; it mimics the unofficial duel server provided by
the organizers (though it uses the official 6/2/1/0 contest scoring and keeps
the scores of everyone against everyone else). It is the descendant of the
2010 CARFAX, the 2009 Orbiting Arena, and the 2004 Arena Eternal. CARDFAX
stored and reported the results of all matches, and had a view of all the 
matchups for each player.

CARDFAX can be seen for a limited time (probably until the end of July) at 
http://R_E_D_A_C_T_E_D/arena.
